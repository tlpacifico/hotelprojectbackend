// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ClassLibrary1
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.30.0.0")]
    public partial class FakeIlhaBela : IIlhaBela
    {
        public System.Data.Entity.DbSet<CaixaMovimento> CaixaMovimentoes { get; set; }
        public System.Data.Entity.DbSet<Cama> Camas { get; set; }
        public System.Data.Entity.DbSet<Empresa> Empresas { get; set; }
        public System.Data.Entity.DbSet<Hospedagem> Hospedagems { get; set; }
        public System.Data.Entity.DbSet<HospedagemConsumo> HospedagemConsumoes { get; set; }
        public System.Data.Entity.DbSet<HospedagemDiaria> HospedagemDiarias { get; set; }
        public System.Data.Entity.DbSet<HospedagemHospede> HospedagemHospedes { get; set; }
        public System.Data.Entity.DbSet<HospedagemPagamento> HospedagemPagamentoes { get; set; }
        public System.Data.Entity.DbSet<Hospede> Hospedes { get; set; }
        public System.Data.Entity.DbSet<Produto> Produtoes { get; set; }
        public System.Data.Entity.DbSet<ProdutoMovimento> ProdutoMovimentoes { get; set; }
        public System.Data.Entity.DbSet<Quarto> Quartos { get; set; }
        public System.Data.Entity.DbSet<QuartoCama> QuartoCamas { get; set; }
        public System.Data.Entity.DbSet<Reserva> Reservas { get; set; }
        public System.Data.Entity.DbSet<ReservaAgendamento> ReservaAgendamentoes { get; set; }
        public System.Data.Entity.DbSet<ReservaPagamento> ReservaPagamentoes { get; set; }
        public System.Data.Entity.DbSet<ReservaQuarto> ReservaQuartoes { get; set; }
        public System.Data.Entity.DbSet<TipoOperacao> TipoOperacaos { get; set; }
        public System.Data.Entity.DbSet<TipoPagamento> TipoPagamentoes { get; set; }
        public System.Data.Entity.DbSet<TipoQuarto> TipoQuartoes { get; set; }

        public FakeIlhaBela()
        {
            CaixaMovimentoes = new FakeDbSet<CaixaMovimento>("Id");
            Camas = new FakeDbSet<Cama>("Id");
            Empresas = new FakeDbSet<Empresa>("Id");
            Hospedagems = new FakeDbSet<Hospedagem>("Id");
            HospedagemConsumoes = new FakeDbSet<HospedagemConsumo>("Id");
            HospedagemDiarias = new FakeDbSet<HospedagemDiaria>("Id");
            HospedagemHospedes = new FakeDbSet<HospedagemHospede>("IdHospedagem", "IdHospede");
            HospedagemPagamentoes = new FakeDbSet<HospedagemPagamento>("Id");
            Hospedes = new FakeDbSet<Hospede>("Id");
            Produtoes = new FakeDbSet<Produto>("Id");
            ProdutoMovimentoes = new FakeDbSet<ProdutoMovimento>("Id");
            Quartos = new FakeDbSet<Quarto>("Id");
            QuartoCamas = new FakeDbSet<QuartoCama>("IdQuarto", "IdCama");
            Reservas = new FakeDbSet<Reserva>("Id");
            ReservaAgendamentoes = new FakeDbSet<ReservaAgendamento>("Id");
            ReservaPagamentoes = new FakeDbSet<ReservaPagamento>("Id");
            ReservaQuartoes = new FakeDbSet<ReservaQuarto>("Id");
            TipoOperacaos = new FakeDbSet<TipoOperacao>("Id");
            TipoPagamentoes = new FakeDbSet<TipoPagamento>("Id");
            TipoQuartoes = new FakeDbSet<TipoQuarto>("Id");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
